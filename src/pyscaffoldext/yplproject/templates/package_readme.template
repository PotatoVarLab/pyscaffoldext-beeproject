# Project

Add a short description here!

## Description

A longer description of your project goes here...

## Project Organization

```
project_dir
|-- README.md                       # 项目说明文档
|-- requirements.txt                # 项目运行环境依赖
|-- project_src                     # 项目源码
|   |-- __init__.py
|   |-- _compat.py                  # 日志兼容模块(自动化执行)
|   |-- project_config.yaml         # 全局项目配置文件(日志,数据库等开发,上线相关)
|   |-- manage.py                   # 项目主模块
|   |-- settings.py                 # 项目主模块配置(持久化模型,特殊文件等)
|   |-- submodule                   # 项目子模块
|   |   |-- __init__.py                 
|   |   |-- _compat.py                  # 日志兼容模块
|   |   |-- manage.py                   # 项目子模块主程序
|   |   `-- settings.py                 # 项目子模块主程序配置
|   |-- tests                       # 测试目录
|   |   `-- test_module1.py             # 子模块测试
|   `-- utils
|       `-- __init__.py
|-- loc_test_module_pkg.py          # 测试项目主模块
`-- run_project_main.py             # 运行项目主模块脚本

⚠ project_config.yaml的线上配置(production)生效依赖服务器环境变量 PRODUCTON_ENVIRONMENT 标识
目前手动在线上服务器的.bashrc 中配置好 export PRODUCTION_ENVIRONMENT=true

备注: 
1. 项目目录(project_dir)为该项目的顶层目录,该目录下不能包含`__init__.py`文件.
2. 整个项目使用project_config.yaml来配置,并且顶级为development和production,方便线下调试和上线
3. 日志兼容模块无特殊需求,无需更改(支持多进程),其他模块使用logger对象时只需
   相对路径导入: `from ._compat import logger`
   直接导入(仅适用与在当前目录执行脚本开发测试): `from _compat import logger`
4. 日志存放位置
   在顶层项目运行(eg:run_project_main.py)将在指定目录位置(默认为:/tmp/logs)创建项目名的日志目录     (eg:/tmp/logs/project_dir/)
   在模块中运行脚本,将在yaml文件日志文件路径下与项目目录相同的路径结构,用以模块自我调试

# TODO
在`_compat`文件中适用了自定义logger,并且为了实现项目全局logger,需要解析文件路径,以获得logger的父子级关系
为简化配置,使用的日志目录默认为/tmp/logs,这不支持非Unix系统
```



## Note

