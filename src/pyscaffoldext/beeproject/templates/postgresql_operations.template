# -*- coding: utf-8 -*-


import os
import re
import psycopg2
import psycopg2.extras

from ._compat import logger, project_config_object


__all__ = ['ModelPostgresqlOperations', 'SpiderPostgresqlOperations']


SELECT_TMP = """
                SELECT 
                    {fields} 
                FROM {schema}.{table} 
                WHERE {conditions}
            """

INSERT_TMP = """
                INSERT INTO 
                    {schema}.{table} ({fields}) 
                VALUES %s
            """

UPDATE_TMP = """
                UPDATE 
                    {schema}.{table} 
                SET 
                    {expression}
                FROM(VALUES %s) AS data({fields}) 
                WHERE {table}.{column} = data.{column}
            """

# postgresql info constant
# MODEL_POSTGRESQL_CONFIG = project_config_object.postgresql_model.__dict__
# SPIDER_POSTGRESQL_CONFIG = project_config_object.postgresql_spider.__dict__


class BasePostgresqlOperations(object):
    def __init__(self, pgconf, **kwargs):
        if not isinstance(pgconf, dict):
            raise Exception('Postgresql config must with Dict.')

        if len([k for k in ['host', 'port', 'database', 'user', 'password', 'schema', 'table'] if k in pgconf.keys()]) != 7:
            raise Exception(
                "Postgresql config-dict must has keys: host,port,database,user,password,schema,table")

        self.schema = pgconf['schema']
        if not isinstance(pgconf['table'], dict):
            tables = pgconf['table'].__dict__
            self.input_table = tables.get('input', '')
            self.output_table = tables.get('output', '')
        else:
            self.input_table = pgconf['table'].get('input', '')
            self.output_table = pgconf['table'].get('output', '')
        self.pg_cfg = {
            'host': pgconf['host'],
            'port': pgconf['port'],
            'user': pgconf['user'],
            'password': pgconf['password'],
            'database': pgconf['database'],
        }


#class ModelPostgresqlOperations(BasePostgresqlOperations):
#    def __init__(self, pgconf=MODEL_POSTGRESQL_CONFIG, **kwargs):
#        super().__init__(pgconf, **kwargs)
#
#    def bulk_insert_results(self, bulkdata):
#        fields = """"""
#        sql = INSERT_TMP.format(schema=self.schema, table=self.output_table, fields=fields)
#        # logger.info(f"insert sql: {sql}")
#        try:
#            assert len(fields.split(',')) == len(bulkdata[0])
#            with psycopg2.connect(**self.pg_cfg) as conn:
#                cursor = conn.cursor(
#                    cursor_factory=psycopg2.extras.RealDictCursor)
#                psycopg2.extras.execute_values(
#                    cursor, sql, bulkdata, page_size=1000)
#                conn.commit()
#            return True
#        except Exception as e:
#            logger.warning(f"insert sql: {sql}")
#            logger.exception(e)
#            return False