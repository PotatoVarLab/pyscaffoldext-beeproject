# -*- coding: utf-8 -*-

import os
import re
import sys
import yaml

from ._log import create_logger


__all__ = ['project_config_object']


BASE_DIR = os.path.dirname(os.path.abspath(__file__))


class DictToObj(object):
    def __init__(self, d):
        for a, b in d.items():
            if isinstance(b, (list, tuple)):
                setattr(self, a, [DictToObj(x) if isinstance(x, dict) else x for x in b])
            else:
                setattr(self, a, DictToObj(b) if isinstance(b, dict) else b)


def auto_parse_project_yaml():
    project_config_object = DictToObj({})
    project_logging_config = {}
    project_config_file = os.path.join(BASE_DIR, 'project_config.yaml')
    if os.path.exists(project_config_file):
        try:
            with open(project_config_file, 'r') as yamlf:
                allcfg = yaml.safe_load(yamlf)
            global_cfg = DictToObj(allcfg)
            # == get system environment varible ==
            if os.environ.get('PRODUCTION_ENVIRONMENT', None):
                project_config_object = global_cfg.production
            else:
                project_config_object = global_cfg.development
            project_logging_config = project_config_object.logging.__dict__
        except Exception as e:
            raise Exception(e)
    else:
        pass

    return project_logging_config, project_config_object


project_logging_config, project_config_object = auto_parse_project_yaml()

basedir_name = os.path.basename(BASE_DIR)
project_dir = os.path.basename(os.path.dirname(BASE_DIR))

logger = create_logger(project_name=basedir_name, confdict=project_logging_config, modulepath=project_dir)
